@model EcommerceApp.ViewModels.ShopViewModel
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor

@{
    ViewData["Title"] = "Shop";
}

<div class="container mt-4">
    <div class="row">
        <!-- Filter Sidebar -->
        <div class="col-lg-3 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Filters</h5>
                </div>
                <div class="card-body">
                    <form method="get" asp-action="Index">
                        <!-- Categories Filter -->
                        <div class="mb-4">
                            <h6 class="mb-3">Categories</h6>
                            <div class="list-group">
                                <a href="@Url.Action("Index", "Shop")" class="list-group-item list-group-item-action @(Model.CurrentCategory == null ? "active" : "")">
                                    All Categories
                                </a>
                                @foreach (var category in Model.Categories)
                                {
                                    <a href="@Url.Action("Index", "Shop", new { categoryId = category.Id })" 
                                       class="list-group-item list-group-item-action @(Model.CurrentCategory == category.Name ? "active" : "")">
                                        @category.Name
                                    </a>
                                }
                            </div>
                        </div>

                        <!-- Price Range Filter -->
                        <div class="mb-4">
                            <h6 class="mb-3">Price Range</h6>
                            <div class="row g-2">
                                <div class="col-6">
                                    <input type="number" name="minPrice" class="form-control" placeholder="Min" value="@Model.MinPrice" />
                                </div>
                                <div class="col-6">
                                    <input type="number" name="maxPrice" class="form-control" placeholder="Max" value="@Model.MaxPrice" />
                                </div>
                            </div>
                        </div>

                        <!-- Stock Filter -->
                        <div class="mb-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="true" id="inStock" name="inStock" @(Model.InStock == true ? "checked" : "") />
                                <label class="form-check-label" for="inStock">
                                    In Stock Only
                                </label>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary w-100">Apply Filters</button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="col-lg-9">
            <!-- Search and Sort Controls -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <form method="get" asp-action="Search" class="d-flex" style="width: 60%;">
                    <input type="text" name="term" class="form-control me-2" placeholder="Search products..." value="@Model.SearchTerm" />
                    <button type="submit" class="btn btn-outline-secondary">Search</button>
                </form>
                
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="sortDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                        Sort By
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="sortDropdown">
                        <li><a class="dropdown-item @(Model.SortOption == SortOption.NameAZ ? "active" : "")" href="@Url.Action("Index", "Shop", new { sortBy = "name_asc", categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm })">Name (A-Z)</a></li>
                        <li><a class="dropdown-item @(Model.SortOption == SortOption.NameZA ? "active" : "")" href="@Url.Action("Index", "Shop", new { sortBy = "name_desc", categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm })">Name (Z-A)</a></li>
                        <li><a class="dropdown-item @(Model.SortOption == SortOption.PriceLowToHigh ? "active" : "")" href="@Url.Action("Index", "Shop", new { sortBy = "price_asc", categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm })">Price (Low to High)</a></li>
                        <li><a class="dropdown-item @(Model.SortOption == SortOption.PriceHighToLow ? "active" : "")" href="@Url.Action("Index", "Shop", new { sortBy = "price_desc", categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm })">Price (High to Low)</a></li>
                        <li><a class="dropdown-item @(Model.SortOption == SortOption.Newest ? "active" : "")" href="@Url.Action("Index", "Shop", new { sortBy = "newest", categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm })">Newest</a></li>
                    </ul>
                </div>
            </div>

            <!-- Product Count and Applied Filters -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <p class="mb-0">Showing @Model.Products.Count() of @Model.TotalItems products</p>
                </div>
                <div>
                    @if (!string.IsNullOrEmpty(Model.CurrentCategory))
                    {
                        <span class="badge bg-secondary me-1">@Model.CurrentCategory <a href="@Url.Action("Index", "Shop")" class="text-white text-decoration-none">×</a></span>
                    }
                    @if (!string.IsNullOrEmpty(Model.SearchTerm))
                    {
                        <span class="badge bg-secondary me-1">Search: @Model.SearchTerm <a href="@Url.Action("Index", "Shop")" class="text-white text-decoration-none">×</a></span>
                    }
                </div>
            </div>
            
            <!-- Products Grid -->
            @if (Model.Products.Any())
            {
                <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
                    @foreach (var product in Model.Products)
                    {                        <div class="col">
                            @await Html.PartialAsync("_ProductCardPartial", product)
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No products found. Try adjusting your filters or search term.
                </div>
            }

            <!-- Pagination -->
            @if (Model.TotalPages > 1)
            {
                <nav class="mt-4" aria-label="Product pagination">
                    <ul class="pagination justify-content-center">                        @if (Model.PageNumber > 1)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", "Shop", new { page = Model.PageNumber - 1, categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm, sortBy = HttpContextAccessor.HttpContext.Request.Query["sortBy"] })">Previous</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <span class="page-link">Previous</span>
                            </li>
                        }

                        @for (int i = 1; i <= Model.TotalPages; i++)
                        {
                            <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                <a class="page-link" href="@Url.Action("Index", "Shop", new { page = i, categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm, sortBy = HttpContextAccessor.HttpContext.Request.Query["sortBy"] })">
                                    @i
                                </a>
                            </li>
                        }

                        @if (Model.PageNumber < Model.TotalPages)
                        {
                            <li class="page-item">
                                <a class="page-link" href="@Url.Action("Index", "Shop", new { page = Model.PageNumber + 1, categoryId = HttpContextAccessor.HttpContext.Request.Query["categoryId"], searchTerm = Model.SearchTerm, sortBy = HttpContextAccessor.HttpContext.Request.Query["sortBy"] })">Next</a>
                            </li>
                        }
                        else
                        {
                            <li class="page-item disabled">
                                <span class="page-link">Next</span>
                            </li>
                        }
                    </ul>
                </nav>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Enable Bootstrap tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
}
