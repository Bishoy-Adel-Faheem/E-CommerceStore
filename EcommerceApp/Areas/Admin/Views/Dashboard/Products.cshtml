@model IEnumerable<EcommerceApp.Models.Product>
@{
    ViewData["Title"] = "Product Analysis";
}

<div class="card border-0 rounded-3 shadow-sm mb-4">
    <div class="card-header bg-white border-0 pt-4 pb-0 d-flex justify-content-between align-items-center">
        <h5 class="card-title">Product Performance</h5>
        <div class="btn-group btn-group-sm">
            <button type="button" class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                Export
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-excel me-2"></i>Excel</a></li>
                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-pdf me-2"></i>PDF</a></li>
                <li><a class="dropdown-item" href="#"><i class="bi bi-file-earmark-text me-2"></i>CSV</a></li>
            </ul>
        </div>
    </div>
    <div class="card-body">
        <div class="row mb-4">
            <div class="col-md-4">
                <div class="card border-0 bg-light mb-3">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0">Total Products</p>
                                <h3 class="mb-0">@Model.Count()</h3>
                            </div>
                            <div class="bg-white rounded-circle p-3">
                                <i class="bi bi-box text-primary fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-0 bg-light mb-3">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0">Average Price</p>
                                <h3 class="mb-0">@Model.Average(p => p.Price).ToString("C")</h3>
                            </div>
                            <div class="bg-white rounded-circle p-3">
                                <i class="bi bi-tag text-success fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card border-0 bg-light mb-3">
                    <div class="card-body py-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <p class="text-muted mb-0">Total Categories</p>
                                <h3 class="mb-0">@Model.Select(p => p.CategoryId).Distinct().Count()</h3>
                            </div>
                            <div class="bg-white rounded-circle p-3">
                                <i class="bi bi-grid text-info fs-4"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row mb-4">
            <div class="col-md-6">
                <h5 class="mb-3">Products by Category</h5>
                <canvas id="productsByCategoryChart" height="300"></canvas>
            </div>
            <div class="col-md-6">
                <h5 class="mb-3">Price Distribution</h5>
                <canvas id="priceDistributionChart" height="300"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="card border-0 rounded-3 shadow-sm">
    <div class="card-header bg-white border-0 pt-4 pb-0 d-flex justify-content-between align-items-center">
        <h5 class="card-title">Products List</h5>
        <div class="input-group w-50">
            <input type="text" id="productSearchInput" class="form-control" placeholder="Search products...">
            <button class="btn btn-outline-secondary" type="button">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="table-responsive">
            <table class="table table-hover align-middle" id="productsTable">
                <thead class="bg-light">
                    <tr>
                        <th>Image</th>
                        <th>Name</th>
                        <th>Category</th>
                        <th>Price</th>
                        <th>Stock</th>
                        <th>Created</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Model.OrderByDescending(p => p.CreatedAt))
                    {
                        <tr>
                            <td>
                                <img src="@(string.IsNullOrEmpty(product.ImageUrl) ? "/images/placeholder.jpg" : product.ImageUrl)" 
                                     alt="@product.Name" class="img-thumbnail" width="50" height="50" style="object-fit: cover;">
                            </td>
                            <td>@product.Name</td>
                            <td>@product.Category.Name</td>
                            <td>@product.Price.ToString("C")</td>
                            <td>
                                @if (product.Stock <= 0)
                                {
                                    <span class="badge bg-danger">Out of Stock</span>
                                }
                                else if (product.Stock <= 5)
                                {
                                    <span class="badge bg-warning text-dark">Low Stock (@product.Stock)</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">In Stock (@product.Stock)</span>
                                }
                            </td>
                            <td>@product.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <a asp-area="Admin" asp-controller="Product" asp-action="Edit" asp-route-id="@product.Id" class="btn btn-outline-primary">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                    <a asp-area="Admin" asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-outline-secondary">
                                        <i class="bi bi-eye"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Chart.js defaults
            Chart.defaults.font.family = "'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif";
            Chart.defaults.color = '#6c757d';
              // Product data - simplified model to avoid circular references
            const products = @Html.Raw(Json.Serialize(Model.Select(p => new {
                id = p.Id,
                name = p.Name,
                price = p.Price,
                stock = p.Stock,
                isFeatured = p.IsFeatured,
                categoryId = p.CategoryId,
                categoryName = p.Category?.Name ?? "Uncategorized"
            })));
            
            // Calculate products by category
            const categoryGroups = {};
            
            // Price ranges
            const priceRanges = {
                '0-25': 0,
                '26-50': 0,
                '51-100': 0,
                '101-250': 0,
                '251-500': 0,
                '501+': 0
            };
            
            // Process products
            products.forEach(product => {
                // For category chart
                const categoryName = product.category.name;
                categoryGroups[categoryName] = (categoryGroups[categoryName] || 0) + 1;
                
                // For price distribution chart
                const price = product.price;
                if (price <= 25) {
                    priceRanges['0-25']++;
                } else if (price <= 50) {
                    priceRanges['26-50']++;
                } else if (price <= 100) {
                    priceRanges['51-100']++;
                } else if (price <= 250) {
                    priceRanges['101-250']++;
                } else if (price <= 500) {
                    priceRanges['251-500']++;
                } else {
                    priceRanges['501+']++;
                }
            });
            
            // Format data for charts
            const categoryLabels = Object.keys(categoryGroups);
            const categoryValues = Object.values(categoryGroups);
            
            const priceLabels = Object.keys(priceRanges);
            const priceValues = Object.values(priceRanges);
            
            // Colors for charts
            const categoryColors = [
                'rgba(13, 110, 253, 0.7)',
                'rgba(25, 135, 84, 0.7)',
                'rgba(255, 193, 7, 0.7)',
                'rgba(220, 53, 69, 0.7)',
                'rgba(13, 202, 240, 0.7)',
                'rgba(111, 66, 193, 0.7)',
                'rgba(108, 117, 125, 0.7)'
            ];
            
            // Products by category chart
            const productsByCategoryCtx = document.getElementById('productsByCategoryChart').getContext('2d');
            new Chart(productsByCategoryCtx, {
                type: 'doughnut',
                data: {
                    labels: categoryLabels,
                    datasets: [{
                        data: categoryValues,
                        backgroundColor: categoryColors,
                        borderColor: '#fff',
                        borderWidth: 2
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'right',
                            labels: {
                                boxWidth: 12,
                                padding: 15
                            }
                        }
                    }
                }
            });
            
            // Price distribution chart
            const priceDistributionCtx = document.getElementById('priceDistributionChart').getContext('2d');
            new Chart(priceDistributionCtx, {
                type: 'bar',
                data: {
                    labels: priceLabels,
                    datasets: [{
                        label: 'Products',
                        data: priceValues,
                        backgroundColor: 'rgba(13, 110, 253, 0.7)',
                        borderColor: 'rgba(13, 110, 253, 1)',
                        borderWidth: 1,
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        x: {
                            grid: {
                                display: false
                            },
                            title: {
                                display: true,
                                text: 'Price Range ($)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 0
                            },
                            title: {
                                display: true,
                                text: 'Number of Products'
                            }
                        }
                    }
                }
            });
            
            // Search functionality
            document.getElementById('productSearchInput').addEventListener('keyup', function() {
                const searchText = this.value.toLowerCase();
                const rows = document.querySelectorAll('#productsTable tbody tr');
                
                rows.forEach(row => {
                    const text = row.textContent.toLowerCase();
                    row.style.display = text.includes(searchText) ? '' : 'none';
                });
            });
        });
    </script>
}
